<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="council.website.dao.change.mapper.LongTradeDataManagementMapper">

	<insert id="addTrade" parameterType="erudite.labs.dao.trade.beans.TradeVO"
		keyColumn="id" useGeneratedKeys="true">
		Insert into BOT_TRADES
		(FK_MARKET_ID,
		FK_TRADE_TYPE_ID, FK_STRATEGY_ID,
		FK_LIFECYCLE_ID,
		TRADE_PAIR, BUY_PRICE,
		BUY_CLIENT_ORDER_ID,
		BUY_ORDER_ID,
		QUANTITY,
		SELL_PRICE,
		SELL_CLIENT_ORDER_ID,
		SELL_ORDER_ID, BUY_TIME, SELL_TIME)
		values(
		#{trade.marketId},
		#{trade.tradeTypeId},
		#{trade.strategyId},
		#{trade.lifecycleId},
		#{trade.tradeCurrency},
		#{trade.buyPrice},
		#{trade.buyClientOrderId},
		#{trade.buyOrderId},
		#{trade.quantity},
		#{trade.sellPrice},
		#{trade.sellClientOrderId},
		#{trade.sellOrderId},
		#{trade.buyTime},
		#{trade.sellTime}
		)
	</insert>

	<update id="updateTradesPostCancel" parameterType="map">
		Update
		BOT_TRADES set
		SELL_PRICE = null,
		SELL_CLIENT_ORDER_ID = null,
		SELL_ORDER_ID = null
		where
		TRADE_PAIR = #{trade.tradeCurrency}
		and
		FK_TRADE_TYPE_ID =
		#{trade.tradeTypeId}
		and FK_MARKET_ID =
		#{trade.marketId}
		and	FK_STRATEGY_ID = #{trade.strategyId}
		and	FK_LIFECYCLE_ID = #{trade.lifecycleId}
		and SELL_TIME
		is null
	</update>

	<update id="updateTrade" parameterType="map">
		Update BOT_TRADES set TRADE_PAIR = #{trade.tradeCurrency}
		<if test="trade.sellPrice != null">,SELL_PRICE = #{trade.sellPrice}</if>
		<if test="trade.sellClientOrderId != null">,SELL_CLIENT_ORDER_ID=#{trade.sellClientOrderId}</if>
		<if test="trade.sellOrderId != null">,SELL_ORDER_ID=#{trade.sellOrderId}</if>
		<if test="trade.sellTime != null">,SELL_TIME=#{trade.sellTime}</if>
		where TRADE_PAIR = #{trade.tradeCurrency}
		and FK_TRADE_TYPE_ID =
		#{trade.tradeTypeId}
		and FK_MARKET_ID = #{trade.marketId}
		and
		FK_STRATEGY_ID = #{trade.strategyId}
		and	FK_LIFECYCLE_ID = #{trade.lifecycleId}
		and SELL_TIME is null
	</update>

	<update id="updateTradeForId" parameterType="map">
		Update BOT_TRADES set TRADE_PAIR = #{trade.tradeCurrency}
		<if test="trade.buyPrice != null">,BUY_PRICE = #{trade.buyPrice}</if>
		<if test="trade.buyClientOrderId != null">,BUY_CLIENT_ORDER_ID=#{trade.buyClientOrderId}</if>
		<if test="trade.buyOrderId != null">,BUY_ORDER_ID=#{trade.buyOrderId}</if>
		<if test="trade.buyTime != null">,BUY_TIME=#{trade.buyTime}</if>
		<if test="trade.sellPrice != null">,SELL_PRICE = #{trade.sellPrice}</if>
		<if test="trade.sellClientOrderId != null">,SELL_CLIENT_ORDER_ID=#{trade.sellClientOrderId}</if>
		<if test="trade.sellOrderId != null">,SELL_ORDER_ID=#{trade.sellOrderId}</if>
		<if test="trade.sellTime != null">,SELL_TIME=#{trade.sellTime}</if>
		where PK_TRADE_ID = #{trade.id}
	</update>

	<select id="getAllPendingEventActions" resultType="council.website.change.mapper.PendingEvent">
	SELECT EVENT_NAME as eventName,
		EVENT_BACKGROUND_IMG_LOC as backgroundImageLocation,
		EVENT_POSTER_LOC as posterLocation,
		EVENT_DESCRIPTION as eventDescription,
		EVENT_REGISTRATION_LINK as registrationLink,
		EVENT_TIME as eventTime,
		EVENT_CATEGORY as eventCategory,
		EVENT_REGISTRATION_DEADLINE_TIME as registrationDeadline,
		EVENT_FACEBOOK_LINK as facebookLink,
		EVENT_INSTAGRAM_LINK as instagramLink,
		EVENT_TWITTER_LINK as twitterLink,
		EVENT_SUBMITTER as eventSubmitter,
		SUBMISSION_TIME as submissionTime,
		FIRST_APPROVER as firstApprover,
		SECOND_APPROVER as secondApprover,
		ADMIN_APPROVER as adminApprover
		SECOND_APPROVAL_REQUIRED as secondApprovalRequired,
		LAST_UPDATED_TIME as lastUpdatedTime

		FROM EVENTS_STAGING
		WHERE EVENT_TIME > #{filterDate} 
		AND EVENT_CATEGORY = #{eventCategory}
		order by SUBMISSION_TIME
	</select>

	<insert id="addNewEventForApprovals" parameterType="council.website.event.beans.PendingEvent"
		keyColumn="id" useGeneratedKeys="true">
		INSERT

		INTO EVENTS_STAGING
		(EVENT_NAME, EVENT_CATEGORY, 
		EVENT_BACKGROUND_IMG_LOC, EVENT_POSTER_LOC, EVENT_DESCRIPTION, EVENT_REGISTRATION_LINK,
		EVENT_TIME, EVENT_REGISTRATION_DEADLINE_TIME, 
		EVENT_FACEBOOK_LINK, EVENT_INSTAGRAM_LINK, EVENT_TWITTER_LINK,
		EVENT_SUBMITTER, SUBMISSION_TIME, FIRST_APPROVER, SECOND_APPROVER, ADMIN_APPROVER, SECOND_APPROVAL_REQUIRED
		LAST_UPDATED_TIME) values
		(#{e.eventName},#{e.eventCategory}, 
		#{e.backgroundImageLocation}, #{e.PosterLocation}, #{e.eventDescription}, #{e.registrationLink},
		#{e.eventTime}, #{e.registrationDeadlineTime}, 
		#{e.facebookLink}, #{e.instagramLink}, #{e.twitterLink},
		#{e.eventSubmitter}, #{e.submissionTime}, 
		#{e.firstApprover}, #{e.secondApprover}, #{e.adminApprover}, #{e.isSecondApprovalRequired, typeHandler=YesNoBooleanTypeHandler}, 
		now())
	</insert>

	<insert id="addHistoricalPrices" keyColumn="id" parameterType="java.util.List"
		useGeneratedKeys="true">
		INSERT INTO
		HISTORICAL_PRICES_DATA (TRADE_CURRENCY, OPEN_TIME, CLOSE_TIME, OPEN,
		HIGH, LOW, CLOSE, VOLUME, NUMBER_OF_TRADES,
		TAKER_BUY_BASE_ASSET_VOLUME, TAKER_BUY_QUOTE_ASSET_VOLUME) VALUES
		<foreach collection="list" item="element" index="index" open="("
			close=")" separator="union all">
			select #{element.tradeCurrency, jdbcType=VARCHAR},#{element.openTime}, #{element.closeTime},
		#{element.open}, #{element.high}, #{element.low}, #{element.close},
		#{element.volume}, #{element.numberOfTrades},
		#{element.takerBuyBaseAssetVolume} ,
		#{element.takerBuyQuoteAssetVolume} from dual
		</foreach>
	</insert>
</mapper>